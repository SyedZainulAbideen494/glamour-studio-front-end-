{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ADMIN\\\\Desktop\\\\glam-studio-front end\\\\src\\\\home\\\\graph.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport axios from 'axios';\nimport { API_ROUTES } from '../app_modules/apiRoutes';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarGraph = () => {\n  _s();\n  const [registrationData, setRegistrationData] = useState([]);\n  useEffect(() => {\n    const fetchRegistrationData = async () => {\n      try {\n        const token = localStorage.getItem('token'); // Get token from local storage\n        const response = await axios.get(API_ROUTES.getAllRegCountGraph, {\n          headers: {\n            Authorization: token // Send token in headers\n          }\n        });\n        setRegistrationData(response.data);\n      } catch (error) {\n        console.error('Error fetching registration counts:', error);\n      }\n    };\n    fetchRegistrationData();\n  }, []);\n\n  // Function to get month name from month index (1 to 12)\n  const getMonthName = monthIndex => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[monthIndex - 1];\n  };\n\n  // Prepare labels and data for the bar graph\n  const labels = Array.from({\n    length: 12\n  }, (_, index) => getMonthName(index + 1)); // Labels from 'January' to 'December'\n  const dataCounts = Array.from({\n    length: 12\n  }, () => 0); // Initial data array, replace with actual counts\n\n  registrationData.forEach(entry => {\n    const monthIndex = entry.month; // Month index (1 to 12)\n    dataCounts[monthIndex - 1] = entry.count;\n  });\n  const data = {\n    labels,\n    datasets: [{\n      label: 'Registrations',\n      data: dataCounts,\n      backgroundColor: '#9d4edd'\n    }]\n  };\n  const options = {\n    scales: {\n      x: {\n        type: 'category',\n        labels\n      },\n      y: {\n        type: 'linear',\n        beginAtZero: true\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bar-graph\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Registrations\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '400px',\n        width: '600px'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(BarGraph, \"8WsT48UslfLehuokeRb0r2MHEuU=\");\n_c = BarGraph;\nexport default LineGraph;\nvar _c;\n$RefreshReg$(_c, \"BarGraph\");","map":{"version":3,"names":["React","useEffect","useState","Bar","axios","API_ROUTES","jsxDEV","_jsxDEV","BarGraph","_s","registrationData","setRegistrationData","fetchRegistrationData","token","localStorage","getItem","response","get","getAllRegCountGraph","headers","Authorization","data","error","console","getMonthName","monthIndex","months","labels","Array","from","length","_","index","dataCounts","forEach","entry","month","count","datasets","label","backgroundColor","options","scales","x","type","y","beginAtZero","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","height","width","_c","LineGraph","$RefreshReg$"],"sources":["C:/Users/ADMIN/Desktop/glam-studio-front end/src/home/graph.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Bar } from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport { API_ROUTES } from '../app_modules/apiRoutes';\r\n\r\nconst BarGraph = () => {\r\n  const [registrationData, setRegistrationData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRegistrationData = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token'); // Get token from local storage\r\n        const response = await axios.get(API_ROUTES.getAllRegCountGraph, {\r\n          headers: {\r\n            Authorization: token, // Send token in headers\r\n          },\r\n        });\r\n        setRegistrationData(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching registration counts:', error);\r\n      }\r\n    };\r\n\r\n    fetchRegistrationData();\r\n  }, []);\r\n\r\n  // Function to get month name from month index (1 to 12)\r\n  const getMonthName = (monthIndex) => {\r\n    const months = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n    return months[monthIndex - 1];\r\n  };\r\n\r\n  // Prepare labels and data for the bar graph\r\n  const labels = Array.from({ length: 12 }, (_, index) => getMonthName(index + 1)); // Labels from 'January' to 'December'\r\n  const dataCounts = Array.from({ length: 12 }, () => 0); // Initial data array, replace with actual counts\r\n\r\n  registrationData.forEach(entry => {\r\n    const monthIndex = entry.month; // Month index (1 to 12)\r\n    dataCounts[monthIndex - 1] = entry.count;\r\n  });\r\n\r\n  const data = {\r\n    labels,\r\n    datasets: [\r\n      {\r\n        label: 'Registrations',\r\n        data: dataCounts,\r\n        backgroundColor: '#9d4edd',\r\n      },\r\n    ],\r\n  };\r\n\r\n  const options = {\r\n    scales: {\r\n      x: {\r\n        type: 'category',\r\n        labels,\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"bar-graph\">\r\n      <h2>Registrations</h2>\r\n      <div style={{ height: '400px', width: '600px' }}>\r\n        <Bar data={data} options={options} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}